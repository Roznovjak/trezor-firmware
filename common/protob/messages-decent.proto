syntax = "proto2";
package hw.trezor.messages.decent;

// Sugar for easier handling in Java
option java_package = "com.satoshilabs.trezor.lib.protobuf";
option java_outer_classname = "TrezorMessageDecent";

/**
 * Request: Ask device for DECENT public key corresponding to address_n path
 * @start
 * @next DecentPublicKey
 * @next Failure
 */
message DecentGetPublicKey {
    repeated uint32 address_n = 1;  // BIP-32 path to derive the key from master node 44'/343'/0'
    optional bool show_display = 2; // optionally show on display before sending the result
}

/**
 * Response: Contains a DECENT public key derived from device private seed
 * @end
 */
message DecentPublicKey {
    optional string wif_public_key = 1; // DECENT pub key in Base58 encoding
    optional bytes raw_public_key = 2;  // Raw public key
}

/**
 * Request: Ask device to sign a DECENT transaction
 * @start
 * @next DecentTxRequest
 * @next Failure
 */
message DecentSignTx {
    repeated uint32 address_n = 1;      // BIP-32 path to derive the key from master node 44'/343'/0'
    optional bytes chain_id = 2;        // 256-bit long chain id
    optional DecentTxHeader header = 3; // DECENT transaction header
    optional uint32 num_operations = 4; // number of operations

    /**
     * Structure representing DECENT transaction header
     */
    message DecentTxHeader {
        optional uint32 ref_block_num = 1;       // 16-bit specifies a block num in the last 2^16 blocks.
        optional uint32 ref_block_prefix = 2;    // specifies the lower 32 bits of the blockid at get_ref_blocknum
        optional uint32 expiration = 3;          // time at which transaction expires
    }
}

/**
 * Response: Device asks to upload next operation
 * @next DecentTxOperationAck
 */
message DecentTxOperationRequest {
    optional uint32 data_size = 1;
}

/**
 * Request: Next operation data that needs to be uploaded
 * @next DecentTxOperationRequest
 * @next DecentSignedTx
 * @next Failure
 */
message DecentTxOperationAck {
    optional DecentOperationTransfer transfer = 1;
    optional DecentOperationUpdateAccount update_account = 2;
    optional DecentOperationCreateAccount create_account = 3;
    optional DecentOperationUnknown unknown = 4;

    /**
     * Structure representing object id type
     */
    message DecentObjectId {
        optional uint64 id = 1;
    }

    /**
     * Structure representing account id type
     */
    message DecentAccountId {
        optional uint64 id = 1;
    }

    /**
     * Structure representing asset type
     */
    message DecentAsset {
        optional sint64 amount = 1;
        optional uint64 id = 2;
    }

    /**
     * Structure representing auth account
     */
    message DecentAuthorityAccount {
        optional DecentAccountId account = 1;
        optional uint32 weight = 2;
    }

    /**
     * Structure representing auth key
     */
    message DecentAuthorityKey {
        optional bytes key = 1;        // Explicit public key bytes; when present, address_n must be empty
        optional uint32 address_n = 2; // BIP-32 path to derive key; when filled out, key must not be present
        optional uint32 weight = 3;
    }

    /**
     * Structure representing authorization settings
     */
    message DecentAuthority {
        optional uint32 threshold = 1;
        repeated DecentAuthorityAccount accounts = 2;
        repeated DecentAuthorityKey keys = 3;
    }

    /**
     * Structure representing transfer data structure
     */
    message DecentOperationTransfer {
        optional string sender = 1; // Asset sender
        optional string receiver = 2;
        optional DecentAsset quantity = 3;
        optional string memo = 4;
    }

    /**
     * Structure representing update authorization.
     */
    message DecentOperationUpdateAccount {
        optional string account = 1;
        optional uint64 permission = 2;
        optional uint64 parent = 3;
        optional DecentAuthority auth = 4;
    }

    /**
     * Structure representing creation of a new account.
     */
    message DecentOperationCreateAccount {
        optional uint64 creator = 1;
        optional uint64 name = 2;
        optional DecentAuthority owner = 3;
        optional DecentAuthority active = 4;
    }

    /**
     * Structure representing actions not implemented above.
     */
    message DecentOperationUnknown {
        optional uint32 data_size = 1;
        optional bytes data_chunk = 2;
    }
}

/**
 * Response: Device returns the signature.
 * The signature fields contain the computed transaction signature.
 * @end
 */
message DecentSignedTx {
    optional string signature = 1; // Computed signature
}
