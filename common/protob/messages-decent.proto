syntax = "proto2";
package hw.trezor.messages.decent;

// Sugar for easier handling in Java
option java_package = "com.satoshilabs.trezor.lib.protobuf";
option java_outer_classname = "TrezorMessageDecent";

/**
 * Request: Ask device for DECENT public key corresponding to address_n path
 * @start
 * @next DecentPublicKey
 * @next Failure
 */
message DecentGetPublicKey {
    repeated uint32 address_n = 1;  // BIP-32 path to derive the key from master node 44'/343'/0'
    optional bool show_display = 2; // optionally show on display before sending the result
}

/**
 * Response: Contains a DECENT public key derived from device private seed
 * @end
 */
message DecentPublicKey {
    optional string wif_public_key = 1; // DECENT pub key in Base58 encoding
    optional bytes raw_public_key = 2;  // Raw public key
}

/**
 * Request: Ask device to sign a DECENT transaction
 * @start
 * @next DecentTxOperationRequest
 * @next Failure
 */
message DecentSignTx {
    repeated uint32 address_n = 1;      // BIP-32 path to derive the key from master node 44'/343'/0'
    optional bytes chain_id = 2;        // 256-bit long chain id
    optional DecentTxHeader header = 3; // DECENT transaction header
    optional uint32 num_operations = 4; // number of operations

    /**
     * Structure representing DECENT transaction header
     */
    message DecentTxHeader {
        optional uint32 ref_block_num = 1;       // 16-bit specifies a block num in the last 2^16 blocks
        optional uint32 ref_block_prefix = 2;    // specifies the lower 32 bits of the reference block ID
        optional uint32 expiration = 3;          // time at which transaction expires
    }
}

/**
 * Response: Device asks to upload next operation
 * @next DecentTxOperationAck
 */
message DecentTxOperationRequest {}

/**
 * Request: Next operation data that needs to be uploaded
 * @next DecentTxOperationRequest
 * @next DecentSignedTx
 * @next Failure
 */
message DecentTxOperationAck {
    optional uint32 operation_id = 1;
    optional DecentOperationTransfer transfer = 2;
    optional DecentOperationAccountUpdate account_update = 3;
    optional DecentOperationAccountCreate account_create = 4;

    /**
     * Structure representing general object_id type
     */
    message DecentObjectId {
        optional uint64 id = 1;
    }

    /**
     * Structure representing account_id type
     */
    message DecentAccountId {
        optional uint64 id = 1;
    }

    /**
     * Structure representing asset type
     */
    message DecentAsset {
        optional sint64 amount = 1;
        optional uint64 asset_id = 2;
    }

    /**
     * Structure representing account authority
     */
    message DecentAuthorityAccount {
        optional DecentAccountId account = 1;
        optional uint32 weight = 2;
    }

    /**
     * Structure representing key authority
     */
    message DecentAuthorityKey {
        optional bytes key = 1;        // Explicit public key bytes
        optional uint32 weight = 3;
    }

    /**
     * Structure representing authorization settings
     */
    message DecentAuthority {
        optional uint32 threshold = 1;
        repeated DecentAuthorityAccount accounts = 2;
        repeated DecentAuthorityKey keys = 3;
    }

    /**
     * Structure representing memo
     */
    message DecentMemo {
        optional bytes sender_pub_key = 1;
        optional bytes receiver_pub_key = 2;
        optional uint64 nonce = 3;
        optional bytes message = 4;
    }

    /**
     * Structure representing transfer operation
     */
    message DecentOperationTransfer {
        optional DecentAsset fee = 1;
        optional DecentAccountId sender = 2;
        optional DecentObjectId receiver = 3;
        optional DecentAsset amount = 4;
        optional DecentMemo memo = 5;  // optional message memo
    }

    /**
     * Structure representing account options
     */
    message DecentAccountOptions {
        optional bytes memo_key = 1;
        optional DecentAccountId voting_account = 2;
        optional uint32 num_miner = 3;
        repeated uint32 votes = 4;
        optional bool allow_subscription = 5;
        optional DecentAsset price_per_subscribe = 6;
        optional uint32 subscription_period = 7;
    }

    /**
     * Structure representing account create operation.
     */
    message DecentOperationAccountCreate {
        optional DecentAsset fee = 1;
        optional DecentAccountId registrar = 2;
        optional string name = 3;
        optional DecentAuthority owner = 4;
        optional DecentAuthority active = 5;
        optional DecentAccountOptions options = 6;

    }

    /**
     * Structure representing account update operation.
     */
    message DecentOperationAccountUpdate {
        optional DecentAsset fee = 1;
        optional DecentAccountId account = 2;
        optional DecentAuthority owner = 3;
        optional DecentAuthority active = 4;
        optional DecentAccountOptions new_options = 5;
    }

}

/**
 * Response: Device returns the signature.
 * The signature fields contain the computed transaction signature.
 * @end
 */
message DecentSignedTx {
    optional string signature = 1; // Computed signature
}
